/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Linguagem.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options
{
  IGNORE_CASE = true;
  static = true;
}PARSER_BEGIN(Linguagem)
public class Linguagem/*@bgen(jjtree)*/implements LinguagemTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTLinguagemState jjtree = new JJTLinguagemState();

/*@egen*/  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new Linguagem(System.in);    try    {      SimpleNode n = Linguagem.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(Linguagem)
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
/*COMENTARIES*/
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* RESERVED_SIMBOLS */
{
  < DOT : "." >
| < COMMA : "," >
| < OPEN_CURLY_BRACKET : "{" >
| < CLOSED_CURLY_BRACKET : "}" >
| < OPEN_PARENTHESE : "(" >
| < CLOSED_PARENTHESE : ")" >
}

TOKEN : /* ARITMETIC_OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < DIVISION_REST : "%%" >
| < EXACT_DIVISION : "%" >
| < POW : "**" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN : /* RELACIONAL_OPERATORS */
{
  < EQUAL : "==" >
| < DIFFERENT : "!=" >
| < MORE_EQUAL : ">=" >
| < LESS_EQUAL : "<=" >
| < MORE_ : ">" >
| < LESS : "<" >
}

TOKEN : /* LOGIC_OPERATORS */
{
  < AND : "&" >
| < OR : "|" >
| < NOT : "!" >
}

TOKEN : /* VARIABLE_TYPES */
{
  < NATURAL : "natural" >
| < REAL : "real" >
| < CHAR : "char" >
| < BOOLEAN : "boolean" >
}

TOKEN : /* RESERVED_WORDS */
{
  < PROGRAM : "program" >
| < DEFINE : "define" >
| < _NOT : "not" >
| < VARIABLE : "variable" >
| < IS : "is" >
| < EXECUTE : "execute" >
| < SET : "set" >
| < TO : "to" >
| < GET : "get" >
| < PUT : "put" >
| < VERIFY : "verify" >
| < _TRUE : "true" >
| < _FALSE : "false" >
| < LOOP : "loop" >
| < WHILE : "while" >
}

TOKEN : /* IDENTIFIER */
{ 
  < IDENTIFIER : ("_"((<LETTER>|<DIGIT>)+"_")*(<LETTER>|<DIGIT>)*)|(<LETTER>(<LETTER>|<DIGIT>)*("_"|("_"(<LETTER>|<DIGIT>)+)*)(<LETTER>|<DIGIT>)*) >
}
// ([a-z])([a-z])*([0-9][a-z]|_[a-z]|[0-9]_[a-z]|_[0-9][a-z]|[a-z]*)*_?|_([a-z])*([0-9][a-z]|[0-9]_|[a-z]_|[a-z]*)*

TOKEN : /* CONSTANTS */
{
  < LOGIC_CONSTANT : "true" | "false" >
| < INTEGER_CONSTANT : ("-")?(<DIGIT>)+ >
| < REAL_CONSTANT: ("-")?(<DIGIT>)+("."(<DIGIT>)+ )? >
| < #DIGIT : ["0"-"9"] >
| < LITERAL_CONSTANT : "'"<LETTER>"'" >
| < #LETTER: (["a"-"z"]) >
}

SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}

{/*@bgen(jjtree) Start */
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}