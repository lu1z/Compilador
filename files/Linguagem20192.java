/* Generated By:JavaCC: Do not edit this line. Linguagem20192.java */
public class Linguagem20192 implements Linguagem20192Constants {
    int exeptionId = 0;

    public int getExeptionId() {
        return exeptionId;
    }

  final public void syntax() throws ParseException {
    trace_call("syntax");
    try {
                  exeptionId = 1;
      jj_consume_token(PROGRAM);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      jj_consume_token(CLOSED_SQUARE_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        const_var_declaration();
        break;
      default:
        jj_la1[0] = jj_gen;
        Empty();
      }
      jj_consume_token(EXECUTE);
      jj_consume_token(THIS);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      command_list();
      jj_consume_token(CLOSED_SQUARE_BRACKET);
      purpose_comentary();
      jj_consume_token(0);
    } finally {
      trace_return("syntax");
    }
  }

  final public void const_var_declaration() throws ParseException {
    trace_call("const_var_declaration");
    try {
                                 exeptionId = 2;
      jj_consume_token(DECLARE);
      jj_consume_token(THIS);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      jj_consume_token(AS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        Const();
        break;
      case VARIABLE:
        var();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CLOSED_SQUARE_BRACKET);
    } finally {
      trace_return("const_var_declaration");
    }
  }

  final public void Const() throws ParseException {
    trace_call("Const");
    try {
                 exeptionId = 3;
      jj_consume_token(CONSTANT);
      label_1:
      while (true) {
        ident_list();
        jj_consume_token(DECLARATION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          jj_consume_token(DECLARATION);
          jj_consume_token(INTEGER_CONSTANT);
          break;
        case REAL:
          jj_consume_token(REAL);
          jj_consume_token(DECLARATION);
          jj_consume_token(REAL_CONSTANT);
          break;
        case STRING:
          jj_consume_token(STRING);
          jj_consume_token(DECLARATION);
          jj_consume_token(LITERAL_CONSTANT);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          jj_consume_token(DECLARATION);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
            jj_consume_token(TRUE);
            break;
          case UNTRUE:
            jj_consume_token(UNTRUE);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        var2();
        break;
      default:
        jj_la1[5] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("Const");
    }
  }

  final public void var() throws ParseException {
    trace_call("var");
    try {
               exeptionId = 4;
      jj_consume_token(VARIABLE);
      label_2:
      while (true) {
        ident_list();
        jj_consume_token(DECLARATION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          break;
        case REAL:
          jj_consume_token(REAL);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        Const2();
        break;
      default:
        jj_la1[8] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("var");
    }
  }

  final public void Const2() throws ParseException {
    trace_call("Const2");
    try {
                  exeptionId = 3;
      jj_consume_token(AS);
      jj_consume_token(CONSTANT);
      label_3:
      while (true) {
        ident_list();
        jj_consume_token(DECLARATION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          jj_consume_token(DECLARATION);
          jj_consume_token(INTEGER_CONSTANT);
          break;
        case REAL:
          jj_consume_token(REAL);
          jj_consume_token(DECLARATION);
          jj_consume_token(REAL_CONSTANT);
          break;
        case STRING:
          jj_consume_token(STRING);
          jj_consume_token(DECLARATION);
          jj_consume_token(LITERAL_CONSTANT);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          jj_consume_token(DECLARATION);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
            jj_consume_token(TRUE);
            break;
          case UNTRUE:
            jj_consume_token(UNTRUE);
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_3;
        }
      }
    } finally {
      trace_return("Const2");
    }
  }

  final public void var2() throws ParseException {
    trace_call("var2");
    try {
                exeptionId = 4;
      jj_consume_token(AS);
      jj_consume_token(VARIABLE);
      label_4:
      while (true) {
        ident_list();
        jj_consume_token(DECLARATION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
          break;
        case REAL:
          jj_consume_token(REAL);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
      }
    } finally {
      trace_return("var2");
    }
  }

  final public void ident_list() throws ParseException {
    trace_call("ident_list");
    try {
                      exeptionId = 5;
      jj_consume_token(IDENTIFIER);
      indice();
      ident_list_conti();
    } finally {
      trace_return("ident_list");
    }
  }

  final public void ident_list_conti() throws ParseException {
    trace_call("ident_list_conti");
    try {
                            exeptionId = 5;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        ident_list();
        break;
      default:
        jj_la1[14] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("ident_list_conti");
    }
  }

  final public void atribution_command() throws ParseException {
    trace_call("atribution_command");
    try {
                              exeptionId = 6;
      jj_consume_token(ASSIGN);
      jj_consume_token(THIS);
      ident_list();
      jj_consume_token(_MORE);
      expressao();
      jj_consume_token(DOT);
    } finally {
      trace_return("atribution_command");
    }
  }

  final public void expressao() throws ParseException {
    trace_call("expressao");
    try {
                     exeptionId = 7;
      expressao_arit_logic();
      expressaoL();
    } finally {
      trace_return("expressao");
    }
  }

  final public void expressaoL() throws ParseException {
    trace_call("expressaoL");
    try {
                      exeptionId = 7;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case DIFFERENT:
      case _MORE:
      case _LESS:
      case MORE_EQUAL:
      case LESS_EQUAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
          break;
        case DIFFERENT:
          jj_consume_token(DIFFERENT);
          break;
        case _MORE:
          jj_consume_token(_MORE);
          break;
        case _LESS:
          jj_consume_token(_LESS);
          break;
        case MORE_EQUAL:
          jj_consume_token(MORE_EQUAL);
          break;
        case LESS_EQUAL:
          jj_consume_token(LESS_EQUAL);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expressao_arit_logic();
        break;
      default:
        jj_la1[16] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("expressaoL");
    }
  }

  final public void expressao_arit_logic() throws ParseException {
    trace_call("expressao_arit_logic");
    try {
                                exeptionId = 7;
      term2();
      menor_prioridade();
    } finally {
      trace_return("expressao_arit_logic");
    }
  }

  final public void menor_prioridade() throws ParseException {
    trace_call("menor_prioridade");
    try {
                            exeptionId = 7;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        term2();
        menor_prioridade();
        break;
      case MINUS:
        jj_consume_token(MINUS);
        term2();
        menor_prioridade();
        break;
      case OR:
        jj_consume_token(OR);
        term2();
        menor_prioridade();
        break;
      default:
        jj_la1[17] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("menor_prioridade");
    }
  }

  final public void term2() throws ParseException {
    trace_call("term2");
    try {
                 exeptionId = 7;
      term1();
      media_prioridade();
    } finally {
      trace_return("term2");
    }
  }

  final public void media_prioridade() throws ParseException {
    trace_call("media_prioridade");
    try {
                            exeptionId = 7;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVISION_REST:
      case EXACT_DIVISION:
      case MULTIPLY:
      case DIVIDE:
      case AND:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
          break;
        case DIVISION_REST:
          jj_consume_token(DIVISION_REST);
          break;
        case EXACT_DIVISION:
          jj_consume_token(EXACT_DIVISION);
          break;
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term1();
        media_prioridade();
        break;
      default:
        jj_la1[19] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("media_prioridade");
    }
  }

  final public void term1() throws ParseException {
    trace_call("term1");
    try {
                 exeptionId = 7;
      elemento();
      maior_prioridade();
    } finally {
      trace_return("term1");
    }
  }

  final public void maior_prioridade() throws ParseException {
    trace_call("maior_prioridade");
    try {
                            exeptionId = 7;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POW:
        jj_consume_token(POW);
        elemento();
        maior_prioridade();
        break;
      default:
        jj_la1[20] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("maior_prioridade");
    }
  }

  final public void elemento() throws ParseException {
    trace_call("elemento");
    try {
                    exeptionId = 7;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        indice();
        break;
      case INTEGER_CONSTANT:
        jj_consume_token(INTEGER_CONSTANT);
        break;
      case REAL_CONSTANT:
        jj_consume_token(REAL_CONSTANT);
        break;
      case LITERAL_CONSTANT:
        jj_consume_token(LITERAL_CONSTANT);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case UNTRUE:
        jj_consume_token(UNTRUE);
        break;
      case OPEN_PARENTHESE:
        jj_consume_token(OPEN_PARENTHESE);
        expressao();
        jj_consume_token(CLOSED_PARENTHESE);
        break;
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(OPEN_PARENTHESE);
        expressao();
        jj_consume_token(CLOSED_PARENTHESE);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("elemento");
    }
  }

  final public void indice() throws ParseException {
    trace_call("indice");
    try {
                  exeptionId = 8;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PARENTHESE:
        jj_consume_token(OPEN_PARENTHESE);
        jj_consume_token(INTEGER_CONSTANT);
        jj_consume_token(CLOSED_PARENTHESE);
        break;
      default:
        jj_la1[22] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("indice");
    }
  }

  final public void command_list() throws ParseException {
    trace_call("command_list");
    try {
                        exeptionId = 9;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          atribution_command();
          break;
        case ACQUIRE:
          data_in_command();
          break;
        case SHOW:
        case PUT:
          data_out_command();
          break;
        case CHECK:
          selection_command();
          break;
        case CARRY:
          repetition_command();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case ACQUIRE:
        case SHOW:
        case PUT:
        case CHECK:
        case CARRY:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_5;
        }
      }
    } finally {
      trace_return("command_list");
    }
  }

  final public void purpose_comentary() throws ParseException {
    trace_call("purpose_comentary");
    try {
                             exeptionId = 10;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PURPOSE:
        jj_consume_token(PURPOSE);
        jj_consume_token(LITERAL_CONSTANT);
        break;
      default:
        jj_la1[25] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("purpose_comentary");
    }
  }

  final public void data_in_command() throws ParseException {
    trace_call("data_in_command");
    try {
                           exeptionId = 11;
      jj_consume_token(ACQUIRE);
      jj_consume_token(THIS);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      ident_list();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        ident_list();
      }
      jj_consume_token(CLOSED_SQUARE_BRACKET);
      jj_consume_token(DOT);
    } finally {
      trace_return("data_in_command");
    }
  }

  final public void data_out_command() throws ParseException {
    trace_call("data_out_command");
    try {
                            exeptionId = 12;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHOW:
        jj_consume_token(SHOW);
        break;
      case PUT:
        jj_consume_token(PUT);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(THIS);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ident_list();
        break;
      case REAL_CONSTANT:
        jj_consume_token(REAL_CONSTANT);
        break;
      case INTEGER_CONSTANT:
        jj_consume_token(INTEGER_CONSTANT);
        break;
      case LITERAL_CONSTANT:
        jj_consume_token(LITERAL_CONSTANT);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ident_list();
          break;
        case REAL_CONSTANT:
          jj_consume_token(REAL_CONSTANT);
          break;
        case INTEGER_CONSTANT:
          jj_consume_token(INTEGER_CONSTANT);
          break;
        case LITERAL_CONSTANT:
          jj_consume_token(LITERAL_CONSTANT);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CLOSED_SQUARE_BRACKET);
      jj_consume_token(DOT);
    } finally {
      trace_return("data_out_command");
    }
  }

  final public void selection_command() throws ParseException {
    trace_call("selection_command");
    try {
                             exeptionId = 13;
      jj_consume_token(CHECK);
      jj_consume_token(THIS);
      expressao();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        trueTerm();
        break;
      case UNTRUE:
        untrueTerm();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOT);
    } finally {
      trace_return("selection_command");
    }
  }

  final public void trueTerm() throws ParseException {
    trace_call("trueTerm");
    try {
                    exeptionId = 13;
      jj_consume_token(TRUE);
      jj_consume_token(RESULT);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      command_list();
      jj_consume_token(CLOSED_SQUARE_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNTRUE:
        untrueTerm2();
        break;
      default:
        jj_la1[32] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("trueTerm");
    }
  }

  final public void untrueTerm() throws ParseException {
    trace_call("untrueTerm");
    try {
                      exeptionId = 13;
      jj_consume_token(UNTRUE);
      jj_consume_token(RESULT);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      command_list();
      jj_consume_token(CLOSED_SQUARE_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        trueTerm2();
        break;
      default:
        jj_la1[33] = jj_gen;
        Empty();
      }
    } finally {
      trace_return("untrueTerm");
    }
  }

  final public void trueTerm2() throws ParseException {
    trace_call("trueTerm2");
    try {
                     exeptionId = 13;
      jj_consume_token(TRUE);
      jj_consume_token(RESULT);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      command_list();
      jj_consume_token(CLOSED_SQUARE_BRACKET);
    } finally {
      trace_return("trueTerm2");
    }
  }

  final public void untrueTerm2() throws ParseException {
    trace_call("untrueTerm2");
    try {
                       exeptionId = 13;
      jj_consume_token(UNTRUE);
      jj_consume_token(RESULT);
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      command_list();
      jj_consume_token(CLOSED_SQUARE_BRACKET);
    } finally {
      trace_return("untrueTerm2");
    }
  }

  final public void repetition_command() throws ParseException {
    trace_call("repetition_command");
    try {
                              exeptionId = 14;
      jj_consume_token(CARRY);
      jj_consume_token(OUT);
      jj_consume_token(THIS);
      expressao();
      jj_consume_token(OPEN_SQUARE_BRACKETS);
      command_list();
      jj_consume_token(CLOSED_SQUARE_BRACKET);
      jj_consume_token(DOT);
    } finally {
      trace_return("repetition_command");
    }
  }

  final public void Empty() throws ParseException {
    trace_call("Empty");
    try {
                 exeptionId = 0;

    } finally {
      trace_return("Empty");
    }
  }

  /** Generated Token Manager. */
  public Linguagem20192TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0xfc000,0xfc000,0x18000000,0x60000000,0x60000000,0x80000000,0x1000000,0x1000000,0x0,0x0,0x0,0x200000,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40000,0x300000,0x3000,0x1e0,0x80000000,0x80000,0x1e0,0x80000000,0x80000,0x3000,0x1e0,0x80000000,0x1e0,0x80000000,0x0,0x0,0x0,0x8,0x7,0x7,0x0,0x80003e10,0x0,0x2f400000,0x2f400000,0x20000,0x0,0x6000000,0x80000e00,0x0,0x80000e00,0x3000,0x2000,0x1000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Linguagem20192(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Linguagem20192(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Linguagem20192TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Linguagem20192(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Linguagem20192TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Linguagem20192(Linguagem20192TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Linguagem20192TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
