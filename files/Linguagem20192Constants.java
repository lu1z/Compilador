/* Generated By:JavaCC: Do not edit this line. Linguagem20192Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Linguagem20192Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EQUAL = 14;
  /** RegularExpression Id. */
  int DIFFERENT = 15;
  /** RegularExpression Id. */
  int _MORE = 16;
  /** RegularExpression Id. */
  int _LESS = 17;
  /** RegularExpression Id. */
  int MORE_EQUAL = 18;
  /** RegularExpression Id. */
  int LESS_EQUAL = 19;
  /** RegularExpression Id. */
  int DOT = 20;
  /** RegularExpression Id. */
  int COMMA = 21;
  /** RegularExpression Id. */
  int OPEN_SQUARE_BRACKETS = 22;
  /** RegularExpression Id. */
  int CLOSED_SQUARE_BRACKET = 23;
  /** RegularExpression Id. */
  int OPEN_PARENTHESE = 24;
  /** RegularExpression Id. */
  int CLOSED_PARENTHESE = 25;
  /** RegularExpression Id. */
  int DECLARATION = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int DIVISION_REST = 29;
  /** RegularExpression Id. */
  int EXACT_DIVISION = 30;
  /** RegularExpression Id. */
  int POW = 31;
  /** RegularExpression Id. */
  int MULTIPLY = 32;
  /** RegularExpression Id. */
  int DIVIDE = 33;
  /** RegularExpression Id. */
  int AND = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int INTEGER = 37;
  /** RegularExpression Id. */
  int REAL = 38;
  /** RegularExpression Id. */
  int STRING = 39;
  /** RegularExpression Id. */
  int BOOLEAN = 40;
  /** RegularExpression Id. */
  int INTEGER_CONSTANT = 41;
  /** RegularExpression Id. */
  int REAL_CONSTANT = 42;
  /** RegularExpression Id. */
  int LITERAL_CONSTANT = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int UNTRUE = 45;
  /** RegularExpression Id. */
  int PROGRAM = 46;
  /** RegularExpression Id. */
  int EXECUTE = 47;
  /** RegularExpression Id. */
  int THIS = 48;
  /** RegularExpression Id. */
  int PURPOSE = 49;
  /** RegularExpression Id. */
  int DECLARE = 50;
  /** RegularExpression Id. */
  int AS = 51;
  /** RegularExpression Id. */
  int CONSTANT = 52;
  /** RegularExpression Id. */
  int VARIABLE = 53;
  /** RegularExpression Id. */
  int ASSIGN = 54;
  /** RegularExpression Id. */
  int ATRIBUTION = 55;
  /** RegularExpression Id. */
  int ACQUIRE = 56;
  /** RegularExpression Id. */
  int SHOW = 57;
  /** RegularExpression Id. */
  int PUT = 58;
  /** RegularExpression Id. */
  int CHECK = 59;
  /** RegularExpression Id. */
  int RESULT = 60;
  /** RegularExpression Id. */
  int CARRY = 61;
  /** RegularExpression Id. */
  int OUT = 62;
  /** RegularExpression Id. */
  int IDENTIFIER = 63;
  /** RegularExpression Id. */
  int LETTER = 64;
  /** RegularExpression Id. */
  int CHAR = 65;
  /** RegularExpression Id. */
  int DIGIT = 66;
  /** RegularExpression Id. */
  int DIGITN0 = 67;
  /** RegularExpression Id. */
  int MALETTER = 68;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int singlelinecomment = 1;
  /** Lexical state. */
  int multilinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "\"/*\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<token of kind 11>",
    "\"*/\"",
    "<token of kind 13>",
    "\"==\"",
    "\"!=\"",
    "\">>\"",
    "\"<<\"",
    "\">>=\"",
    "\"<<=\"",
    "\".\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"%%\"",
    "\"%\"",
    "\"**\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"integer\"",
    "\"real\"",
    "\"string\"",
    "\"boolean\"",
    "<INTEGER_CONSTANT>",
    "<REAL_CONSTANT>",
    "<LITERAL_CONSTANT>",
    "\"true\"",
    "\"untrue\"",
    "\"program\"",
    "\"execute\"",
    "\"this\"",
    "\"purpose\"",
    "\"declare\"",
    "\"as\"",
    "\"constant\"",
    "\"variable\"",
    "\"assign\"",
    "\">>>\"",
    "\"acquire\"",
    "\"show\"",
    "\"put\"",
    "\"check\"",
    "\"result\"",
    "\"carry\"",
    "\"out\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<CHAR>",
    "<DIGIT>",
    "<DIGITN0>",
    "<MALETTER>",
  };

}
